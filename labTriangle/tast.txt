number 51
Реализовать класс Triangle (задание 25) с полями-координатами вершин. Для представляения координат вершин
используйте класс Point из задания 27.

//задание 25
Создать класс Triangle для представления треугольника. Поля данных должны включать углы и стороны.
Требуется реализовать операции: получения и изменения полей данных, вычисление площади, вычисления периметра, вычисления высот,
а также определения вида треугольника(равносторонний, равнобедренный или прямоугольный);

//задание 27
Создать класс Point для работы с точками на плоскасти. Координаты точки - декартовы. Обязательно должны быть реализованы:
перемещение точки по оси Х, перемещение точки по оси Y, определение расстояния до начала координат, растояния между двумя точками,
преобразование в полярные координаты, сравнение на совпадение и несовпадение.

//TZ
Первое предложение задания говорит о том, что вам нужно создать класс Triangle, который будет представлять треугольник,
используя в качестве вершин этого треугольника объекты другого класса — Point. То есть, каждую из трех вершин треугольника 
вы будете описывать с помощью координат, которые будут храниться в экземплярах класса Point.

Вот как можно понять структуру работы:

1. Класс Point: Этот класс будет содержать координаты точки на плоскости (например, x и y). Он должен включать методы для 
выполнения различных операций с точками, таких как перемещение, вычисление расстояний и преобразование в полярные координаты.

2. Класс Triangle: Этот класс будет использовать три экземпляра класса Point в качестве своих полей для хранения координат 
вершин треугольника. В классе Triangle вы также реализуете методы для вычисления свойств треугольника (площадь, периметр, высоты и тип треугольника).

Таким образом, структура классов будет следующей:

- Point: содержит координаты и методы для работы с ними.
- Triangle: использует три объекта Point для представления вершин треугольника и содержит методы для вычисления его свойств.

ПРАВКИ:::
//в функция убрать входные параметры  const Point& A, const Point& B, const Point& C сделать get и set для каждой отдельно+
	// получать данные внутри с помощью гетов сетов +
	//либо можно передавать отдельно типо индикатор (1 2 или 3) и уже внутри через свич кейс делать +
	//в classPoint.h поля сделать типа double* +
	//можно разбить labTriangle на разные файлы ответственные за отдельное+






